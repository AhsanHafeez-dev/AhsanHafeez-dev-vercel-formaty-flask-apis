FROM public.ecr.aws/lambda/python:3.11

WORKDIR /app
 
COPY requirements.txt .

RUN pip install -r requirements.txt
COPY app.py ${LAMBDA_TASK_ROOT}

CMD["app.lambda_handler"]

# # Stage 1: Build stage with python:slim to install dependencies
# FROM python:3.9-slim AS build

# # Install necessary system dependencies for building packages
# RUN apt-get update && apt-get install -y \
#     build-essential \
#     libmupdf-dev \
#     libopenjp2-7-dev \
#     libjpeg62-turbo-dev \
#     zlib1g-dev \
#     libfreetype6-dev \
#     libx11-dev \
#     libxext-dev \
#     libxi-dev \
#     libgl1-mesa-dev \
#     libglu1-mesa-dev \
#     python3-dev

# # Set the working directory
# WORKDIR /app

# # Copy the requirements file and install dependencies
# COPY requirements.txt .

# RUN pip install --no-cache-dir --target=/app/dependencies  -r requirements.txt

# # Stage 2: Final stage with AWS Lambda base image
# FROM public.ecr.aws/lambda/python:3.12

# # Set the working directory in the container
# WORKDIR /var/task

# # Copy the dependencies from the build stage
# COPY --from=build /usr/local/lib/python3.9/site-packages /var/task/
# COPY --from=build /usr/local/bin /usr/local/bin
# COPY --from=build /app/dependencies /var/task/
# COPY --from=build /app /var/task/

# # Copy the rest of your application code
# # COPY . .
# COPY app.py /var/task/
# ENV PYTHONPATH=/var/task:$PYTHONPATH


# # # Set the environment variable for Lambda
# ENV AWS_LAMBDA_FUNCTION_HANDLER=lam.lambda_handler

# ENTRYPOINT ["python3", "-m", "awslambdaric"]

# # Provide the handler as the CMD
# CMD ["lam.lambda_handler"]



















# # Use an official Ubuntu base image
# FROM ubuntu:22.04

# # Set the DEBIAN_FRONTEND to noninteractive to avoid prompts during package installation
# ENV DEBIAN_FRONTEND=noninteractive

# # Install necessary dependencies
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     wget \
#     lsb-release \
#     software-properties-common \
#     ca-certificates \
#     gnupg \
#     dirmngr \
#     python3 \
#     python3-pip

# # Add the MiKTeX repository and key
# RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys D6BC243565B2087BC3F897C9277A7293F59E4889 \
#     echo "deb http://miktex.org/download/ubuntu bionic universe" | tee /etc/apt/sources.list.d/miktex.list

# # Update package lists and install MiKTeX
# # RUN apt-get insxiktex 

# # Set the working directory in the container
# WORKDIR /app

# # Copy the current directory contents into the container at /app
# COPY . /app

# # Install any needed packages specified in requirements.txt
# RUN pip3 install --no-cache-dir -r requirements.txt

# # Expose the port the app runs on
# EXPOSE 5000

# # Run the application
# CMD ["python3", "app.py"]


#using miktex



# # Use a base image that includes MiKTeX
# FROM miktex/miktex

# # Install Python and other dependencies
# RUN apt-get update && \
#     apt-get install -y --no-install-recommends \
#     python3 
#     # python3-pip 
#     # && rm -rf /var/lib/apt/lists/*

# # Set the working directory in the container
# WORKDIR /app

# # Copy the current directory contents into the container at /app
# COPY . /app

# # Install any needed Python packages specified in requirements.txt
# RUN pip3 install --no-cache-dir -r requirements.txt

# # Expose the port the app runs on
# EXPOSE 5000

# # Run the application
# CMD ["python3", "app.py"]
